name: 'Terraform'

env:
   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
   AWS_REGION: "eu-west-3"
   NODE_ENV: production

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
    paths:
      - 'website/**'

permissions:
  contents: read

jobs:
   build:
    name: 'Nuxt Build'
    runs-on: ubuntu-latest

    env:
      NUXT_MAIL_TO: ${{ secrets.NUXT_MAIL_TO }}
      NUXT_MAIL_CC: ${{ secrets.NUXT_MAIL_CC }}
      NUXT_SMTP_PORT: ${{ secrets.NUXT_SMTP_PORT }}
      NUXT_SMTP_USER: ${{ secrets.NUXT_SMTP_USER }}
      NUXT_SMTP_PASSWORD: ${{ secrets.NUXT_SMTP_PASSWORD }}
      NUXT_ENV_CLOUDINARY_CLOUD_NAME: ${{ secrets.NUXT_ENV_CLOUDINARY_CLOUD_NAME }}

    defaults:
      run:
        shell: bash
        working-directory: website

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Enable Corepack
      run: corepack enable

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "latest"

    - name: Install Dependencies with npm
      run: npm install --include=dev
      
    - name: Build Nuxt Project
      run: npm run generate #--dotenv=.env.dev

    - name: List files for debugging
      run: ls -aR | grep .output

    - name: Archive generated .output folder
      uses: actions/upload-artifact@v4
      with:
        name: .output
        include-hidden-files: true
        path: website/.output

   terraform:
       name: 'Terraform'
       needs: build
       runs-on: ubuntu-latest
       environment: production
   
       env:
          TF_VAR_project_root: ${{ github.workspace }}
          TF_VAR_ovh_access_key: ${{ secrets.ovh_access_key }}
          TF_VAR_ovh_application_secret: ${{ secrets.ovh_application_secret }}
          TF_VAR_ovh_consumer_key: ${{ secrets.ovh_consumer_key }}
   
       # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
       defaults:
         run:
           shell: bash
           working-directory: infra
           
       steps:
       - name: Checkout
         uses: actions/checkout@v4

       - name: Download a single artifact
         uses: actions/download-artifact@v4
         with:
           name: .output
           path: ./website/.output/
   
       - name: Setup Terraform
         uses: hashicorp/setup-terraform@v3
         
       - name: Terraform Init
         run: terraform init
   
       - name: Terraform Format
         run: terraform fmt -check
   
       - name: Terraform Plan
         run: terraform plan -input=false
   
         # On push to "master", build or change infrastructure according to Terraform configuration files
         # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
       - name: Terraform Apply
         if: github.ref == 'refs/heads/master' && github.event_name == 'push'
         run: terraform apply -auto-approve -input=false

       - name: Create Cloudfront invalidation
         if: github.ref == 'refs/heads/master' && github.event_name == 'push'
         run: aws cloudfront create-invalidation --distribution-id="$(terraform output -raw distribution_id)" --paths="/*"

       - name: Setup tmate session
         if: ${{ failure() }}
         uses: mxschmitt/action-tmate@v3
         with:
          connect-timeout-seconds: 120